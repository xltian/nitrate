Nitrate.TestRuns = {};
Nitrate.TestRuns.List = {};
Nitrate.TestRuns.Details = {};
Nitrate.TestRuns.New = {};
Nitrate.TestRuns.Edit = {};
Nitrate.TestRuns.Execute = {}
Nitrate.TestRuns.Clone = {};
Nitrate.TestRuns.ChooseRuns = {};
Nitrate.TestRuns.AssignCase = {}


Nitrate.TestRuns.List.on_load = function()
{
    bind_version_selector_to_product(true, $('id_product'));
    bind_build_selector_to_product(true, $('id_product'));
    
    if($('relativeSearchOption_case')) {
        $('relativeSearchOption_case').observe('click', function(e) {
            if($('relativeSearch_case').getStyle('display') == 'none'){
                Effect.BlindDown('relativeSearch_case',{ duration: 0.5 });
                this.className = 'up';
            } else {
                Effect.BlindUp('relativeSearch_case',{ duration: 0.5 });
                this.className = 'down';
            };
        });
    };
    
    if($('testruns_table')) {
        $('id_check_all_runs').observe('click',function(e) {
            clickedSelectAll(this, 'testruns_table', 'run')
        });
        
        TableKit.Sortable.init('testruns_table',
        {
            rowEvenClass : 'roweven',
            rowOddClass : 'rowodd',
            nosortClass : 'nosort'  
        });
    };
    
    $('id_search_people').name = $F('id_people_type');
    
    $('id_people_type').observe('change', function() {
        $('id_search_people').name = $F('id_people_type');
    });
    
    if($('run_column_add')) {
        $('run_column_add').observe('change', function(t) {
            switch(this.value) {
                case 'col_plan':
                    $('col_plan_head').show();
                    $$('.col_plan_content').each(function(t){ t.show() });
                    $('col_plan_option').hide();
                    break;
            };
        });
    };

    var oTable;
    oTable = jQ('#testruns_table').dataTable({
        "iDisplayLength": 20,
        "sPaginationType": "full_numbers",
        "bFilter": false,
        "bLengthChange": false,
        "aaSorting": [[ 1, "desc" ]],
        "bProcessing": true,
        "bServerSide": true,
        "sAjaxSource": "/runs/ajax/"+this.window.location.search,
        "aoColumns": [
          {"bSortable": false },
          null,
          {"sType": "html"},
          {"sType": "html"},
          {"sType": "html"},
          {"bVisible": false},
          null,
          null,
          null,
          null,
          null,
          null,
        ]
        });
}

Nitrate.TestRuns.Details.on_load = function()
{
    // Observe the interface buttons
    if($('id_sort'))
        $('id_sort').observe('click', taggleSortCaseRun);
    
    $('id_check_all_button').observe('click', function(e) {
        toggleAllCheckBoxes(this, 'id_table_cases', 'case_run');
    })
    
    
    if($('id_check_box_highlight').checked)
        $$('.mine').invoke('addClassName','highlight');
    
    $('id_check_box_highlight').observe('click', function(e) {
        e=$$('.mine');
        this.checked && e.invoke('addClassName','highlight') || e.invoke('removeClassName','highlight')
    });
    
    $('id_blind_all_link').observe('click', function(e) {
    	//Adding a lock here to avoid generating too much requests.
    	//The lock won't be released until after all requests generated by 'expand all' are finished.
    	//Unfortunately we're using $$('td[id^="id_loading_"]').length == 0.
    	//Not elegant enough.
    	//See https://bugzilla.redhat.com/show_bug.cgi?id=676590
    	if ($$('td[id^="id_loading_"]').length == 0){
    		this.removeClassName('locked');
    	}
    	if (this.hasClassName('locked')){
    		//To disable the 'expand all' until all case runs are expanded.
    		return false;
    	}
    	else{
    		this.addClassName('locked');
            var element = this.down();
            if (element.hasClassName('collapse-all')) {
            	this.title = "Collapse all cases"
                blinddownAllCases(element);
            } 
            else {
            	this.title = "Expand all cases"
                blindupAllCases(element);
            };
            
    	}
    })
    
    // Observe the case run toggle and the comment form
    var toggle_case_run = function(e) {
        var c = this.up(); // Container
        var c_container = c.next(); // Content Containers
        var case_id = c.getElementsBySelector('input[name="case"]')[0].value;
        var case_run_id = c.getElementsBySelector('input[name="case_run"]')[0].value;
        var case_text_version = c.getElementsBySelector('input[name="case_text_version"]')[0].value;
        var type = 'case_run';
        var callback = function(t) {
            // Observe the update case run stauts/comment form
            c_container.adjacent('.update_form').invoke('stopObserving', 'submit');
            c_container.adjacent('.update_form').invoke('observe', 'submit', updateCaseRunStatus);
            
            // Observe the delete comment form
            var refresh_case = function(t) {
                constructCaseRunZone(c_container, c, case_id);
            }
            
            var rc_callback = function(e) {
                e.stop();
                if(!confirm(default_messages.confirm.remove_comment))
                    return false;
                removeComment(this, refresh_case)
            };
            c_container.adjacent('.form_comment').invoke('stopObserving', 'submit');
            c_container.adjacent('.form_comment').invoke('observe', 'submit', rc_callback);
        }
        toggleTestCaseContents(type, c, c_container, case_id, case_text_version, case_run_id, callback);
    }
    $$('.expandable').invoke('observe', 'click', toggle_case_run);
    
    // Auto show the case run contents.
    if(window.location.hash != '') {
        elem = 'a[href=\"' + window.location.hash + '\"]'
        $$(elem)[0].scrollTo();
        fireEvent($$(elem)[0], 'click');
    } else {
        if($$('tr.is_current').length != 0) {
            $$('tr.is_current').each(function(e) {
                fireEvent(e, 'click');
            });
        };
    };
    
    // Mass operations
    if($('id_mass_change_case_run_status')) {
        $('id_mass_change_case_run_status').observe('change', function(e) {
            var object_pks = serializeCaseRunFromInputList($('id_table_cases'));
            debug_output(this.value);
            if(this.value == '')
                return false;
            if(object_pks.length == 0) {
                alert(default_messages.alert.no_case_selected);
                return false;
            };
            if(!confirm(default_messages.confirm.change_case_status))
                return false;
            updateObject('testruns.testcaserun', object_pks, 'case_run_status', this.value, 'int', reloadWindow);
        });
    };

    // Filter Case-Run
    if($('filter_case_run')) {
            $('filter_case_run').observe('click',function(e){
                if($('id_filter').getStyle('display') == 'none'){
                    $('id_filter').show();
                    this.update(default_messages.link.hide_filter);
                } else {
                    $('id_filter').hide();
                    this.update(default_messages.link.show_filter);
                };
        });
    };
    //bind click to status btn
    jQ('.btn_status').live('click', function(){
        var from = jQ(this).siblings('.btn_status:disabled')[0].title;
        var to = this.title;
        if(jQ('span#'+to+' a').text() == '0'){
            var htmlstr = "[<a href='javascript:void(0)' onclick=\"showCaseRunsWithSelectedStatus($('id_filter'), '"+jQ(this).attr('crs_id')+"')\">0</a>]";
            jQ('span#'+to).html(htmlstr);
        }
        if(jQ('span#'+from+' a').text() == '1'){
            jQ('span#'+from).html("[<a>1</a>]");
        }
        jQ('span#'+to+' a').text(parseInt(jQ('span#'+to+' a').text())+1);
        jQ('span#'+from+' a').text(parseInt(jQ('span#'+from+' a').text())-1);
    })
}

Nitrate.TestRuns.New.on_load = function()
{
    if($('testcases')) {
          TableKit.Sortable.init('testcases',
          {
             nosortClass : 'nosort'
          });
    }
    if($('testcases_filter')) {
        TableKit.Sortable.init('testcases_filter',
        {
            rowEvenClass : 'roweven',
            rowOddClass : 'rowodd',
            nosortClass : 'nosort'
        });
    }

}

Nitrate.TestRuns.Edit.on_load = function()
{
    bind_version_selector_to_product(false);
    bind_build_selector_to_product(false);
    if ($('id_auto_update_run_status').checked == true){
        $('id_finished').checked = false;
        $('id_finished').disable();
    }
    $('id_auto_update_run_status').observe('click', function(){
        if ($('id_auto_update_run_status').checked == true){
            $('id_finished').checked = false;
            $('id_finished').disable();
        }else{
            if ($('id_finished').disabled == true)
                $('id_finished').enable();
        }
    })
}

Nitrate.TestRuns.Execute.on_load = function()
{
    $$('.case_title').invoke('observe', 'click', function(e) {
        var type = 'execute_case_run';
        var container = this.up();
        var content_container = this.next();
        var case_id = this.adjacent('input[name="case_id"]')[0].value;
        var case_text_version = this.adjacent('input[name="case_text_version"]')[0].value;
        var case_run_id = this.adjacent('input[name="case_run_id"]')[0].value;
        var callback = function(t) {
            content_container.getElementsBySelector('.update_form')[0].observe(
                'submit', updateCaseRunStatus
            );
        }
        
        toggleTestCaseContents(type, container, content_container, case_id, case_text_version, case_run_id, callback)
    });
    
    // Auto show the case contents.
    if(window.location.hash != '') {
        fireEvent($$('a[href=\"' + window.location.hash + '\"]')[0], 'click');
    } else {
        if($$('.is_current') != []) {
            $$('.is_current').each(function(e) {
                fireEvent(e, 'click');
            })
        }
    }
    
    $('id_check_box_blinddownallcase').observe('click',function(){
        if($('id_check_box_blinddownallcase').checked){
            blinddownAllCases();
        } else {
            blindupAllCases();
        }
    })
    if($('id_check_box_highlight').checked)
        $$('.mine').invoke('addClassName','highlight');
    
    $('id_check_box_highlight').observe('click', function(e) {
        e=$$('.mine');
        this.checked && e.invoke('addClassName','highlight') || e.invoke('removeClassName','highlight')
    })
}

Nitrate.TestRuns.Clone.on_load = function()
{
    bind_version_selector_to_product(false);
    bind_build_selector_to_product(false);
}

Nitrate.TestRuns.ChooseRuns.on_load = function()
{
     if($('id_check_all_button')) {
        $('id_check_all_button').observe('click', function(m) {
            toggleAllCheckBoxes(this, 'id_table_runs', 'run')
        })
    }
    
}

Nitrate.TestRuns.AssignCase.on_load= function()
{
    if($('id_check_all_button')) {
        $('id_check_all_button').observe('click', function(m) {
            toggleAllCheckBoxes(this, 'id_table_cases', 'case')
        })
    }
    
    $$('input[name="case"]').invoke('observe', 'click', function(t) {
        if(this.checked) {
            this.up(1).addClassName('selection_row');
            this.up().next(7).update('<div class="apply_icon"></div>');
        } else {
            this.up(1).removeClassName('selection_row');
            this.up().next(7).update('');
        }
    })
}

var updateCaseRunStatus = function(e)
{
    e.stop();
    var container = this.up(3);
    var parent = container.up();
    var title = parent.previous();
    var link = title.getElementsBySelector('.expandable')[0];
    var parameters = this.serialize(true);
    var ctype = parameters['content_type'];
    var object_pk = parameters['object_pk'];
    var field = parameters['field'];
    var value = parameters['value'];
    var vtype = 'int';
    
    // Callback when 
    var callback = function(t) {
        // Reset the content to loading
        var ajax_loading = getAjaxLoading();
        ajax_loading.id = 'id_loading_' + parameters['case_id'];
        container.update(ajax_loading);
        
        // Update the contents
        if (parameters['value'] != '') {
            // Update the case run status icon
            var crs = Nitrate.TestRuns.CaseRunStatus;
            var icon_status = title.getElementsBySelector('.icon_status');
            icon_status.each(function(item) {
                for (i in crs) {
                    if (typeof(crs[i]) == 'string' && item.hasClassName('btn_' + crs[i]))
                        item.removeClassName('btn_' + crs[i]);
                }
                item.addClassName('btn_' + Nitrate.TestRuns.CaseRunStatus[value-1]);
            })
            
            // Update related people
            var usr = Nitrate.User;
            title.getElementsBySelector('.link_tested_by').each(function(i) {
                i.href = 'mailto:' + usr.email;
                i.update(usr.username);
            })
        }
        
        // Mark the case run to mine
        if(!title.hasClassName('mine'))
            title.addClassName('mine');

        //update progress bar
        if (typeof(t) != 'undefined'){
            var returnobj = t.responseText.evalJSON();
            jQ('span#complete_percent').text(returnobj.c_percent);
            jQ('div.progress-inner').attr('style','width:'+returnobj.c_percent+'%');
            jQ('div.progress-failed').attr('style','width:'+returnobj.f_percent+'%');
        }

        // Blind down next case
        fireEvent(link, 'click');
        if ($('id_check_box_auto_blinddown').checked && parameters['value'] != '') {
            var next_title = parent.next();
            if(!next_title) {
                //alert(default_messages.alert.last_case_run);
                return false;
            }
            if(next_title.next().getStyle('display') == 'none')
                fireEvent(next_title.getElementsBySelector('.expandable')[0], 'click');
        } else {
            fireEvent(link, 'click');
        }
    }
    
    // Add comment
    if (parameters['comment'] != '') {
        var c = new Element('div');
        if(parameters['value'] != '')
            submitComment(c, parameters);
        else
            submitComment(c, parameters, callback)
    }
    
    // Update the object when changing the status
    if(parameters['value'] != '') {
        updateRunStatus(ctype, object_pk, field, value, vtype, callback);
    }
}

function changeCaseRunOrder(run_id, case_run_id, sort_key)
{
    nsk = prompt('Enter your new order number', sort_key) // New sort key
    
    if(!nsk)
        return false
   
    if(isNaN(nsk)) {
        alert('The value must be a integer number and limit between 0 to 32300.');
        return false;
    }
    
    if (nsk > 32300 || nsk < 0) {
        alert('The value must be a integer number and limit between 0 to 32300.');
        return false;
    }
    
    if(nsk == sort_key) {
        alert('Nothing changed');
        return false;
    }
    
    // Succeed callback
    var s_callback = function(t) {
        returnobj = t.responseText.evalJSON(true);
        
        if (returnobj.response == 'ok') {
            window.location.reload();
        } else {
            alert(returnobj.response);
        }
    }
    
    var ctype = 'testruns.testcaserun';
    var object_pk = case_run_id;
    var field = 'sortkey';
    var value = nsk;
    var vtype = 'int';
    
    updateObject(ctype, object_pk, field, value, vtype, s_callback);
}

function taggleSortCaseRun(event)
{
    var element = event.target;
    
    if(element.innerHTML != 'Done Sorting'){
        // $('id_sort_control').show();
        // Remove the unsortable case text
        
        $('id_blind_all_link').remove(); // Remove blind all link
        
        // Remove case text
        $$('#id_table_cases .hide').each(function(t) {
            t.remove();
        });
        
        // Remove blind down arrow link
        $$('#id_table_cases .blind_icon').each(function(t) {
            t.remove();
        });
        // Use the title to replace the blind down title link
        $$('#id_table_cases .blind_title_link').each(function(t) {
            t.replace((new Element('span')).update(t.innerHTML));
        });
        
        // Use the sortkey content to replace change sort key link
        $$('#id_table_cases .mark').each(function(t) {
            t.parentNode.update(t.innerHTML);
        });
        
        $$('#id_table_cases .case_content').invoke('remove');
        $$('#id_table_cases .expandable').invoke('stopObserving');
        
        // init the tableDnD object
        var table = document.getElementById('id_table_cases');
        var tableDnD = new TableDnD();
        tableDnD.init(table);
        $('id_sort').innerHTML='Done Sorting';
        
        //alert('Drag and drop the rows to adjust the order, click "Done Sorting" link to submit your changes, otherwise please refresh the page to cancel.');
    } else {
        // $('id_sort_control').hide();
        // var element = element.replace((new Element('span')).update('Submitting changes'));
        
        $$('#id_table_cases input[type=checkbox]').each(function(t) {
            t.checked = true;
            t.disabled = false;
        });
        postToURL('ordercaserun/', serializeCaseRunFromInputList('id_table_cases', 'case_run'), 'get');
    }
}
function selectcase(){
    $('testcases_unselected').toggle();
}

function constructCaseRunZone(container, title_container, case_id)
{
    var link = title_container.getElementsBySelector('.expandable')[0];
    if(container) {
        var td = new Element('td', {'id': 'id_loading_' + case_id, 'colspan': 12});
        td.update(getAjaxLoading());
        container.update(td);
    }
    
    if(title_container) {
        fireEvent(link, 'click');
        fireEvent(link, 'click');
    }
}

function addCaseRunBug(run_id, title_container, container, case_id, case_run_id, callback)
{
    // FIXME: Popup dialog to select the bug system
    bug_id = prompt('Please input the bug id.');

    if(bug_id == null)
        return false

    bug_id = bug_id.replace(/ /g, '');
    
    if(parseInt(bug_id) != bug_id) {
        alert('Wrong number.');
        return false;
    }
    
    if(bug_id.length > 7) {
        alert('Number too long, length must be less than 7.');
        return false;
    }
    
    var url = getURLParam(case_run_id).url_case_run_bug;
    var parameters = {
        a: 'add',
        case_run: case_run_id,
        bug_system: 1, // FIXME: Temporary solution here.
        bug_id: bug_id,
    }
    parameters['case'] = case_id;
    
    var success = function(t) {
        var returnobj = t.responseText.evalJSON();
        
        if(returnobj.rc == 0) {
            if (callback)
                return callback();
            //update bug count
            if(jQ('span#'+case_run_id+'_case_bug_count').text()=='0'){
                jQ('span#'+case_run_id+'_case_bug_count').addClass('have_bug');
            }
            jQ('span#'+case_run_id+'_case_bug_count').text(parseInt(jQ('span#'+case_run_id+'_case_bug_count').text())+1);
            if(jQ('span#total_run_bug_count a').text()=='No Bugs'){
                jQ('span#total_run_bug_count').html(
                    "<a title='Show All Bugs' href='/run/"+run_id+"/report/#buglist'>Bugs ["+returnobj.run_bug_count+"]</a>"
                );
            }
            else{
                jQ('span#total_run_bug_count a').html("Bugs ["+returnobj.run_bug_count+"]");
            }
            return constructCaseRunZone(container, title_container, case_id);
        } else {
            alert(returnobj.response);
            return false;
        }
    }
    
    new Ajax.Request(url, {
        method: 'get',
        parameters: parameters,
        onSuccess: success,
        onFailure: json_failure,
    })
}
function removeCaseRunBug(run_id, title_container, container, bug_id, case_id, case_run_id, callback)
{   
    if(!bug_id)
        return false;
    
    if(!confirm('Are you sure to remove the bug?'))
        return false;
    
    var url = '/caserun/' + case_run_id + '/bug/';
    
    var parameters = {
        a: 'remove',
//        index_id: index_id,
//        run: run_id,
        case_run: case_run_id,
        bug_id: bug_id,
    }
    
   var success = function(t) {
        var returnobj = t.responseText.evalJSON();
        
        if(returnobj.rc == 0) {
            if (callback)
                return callback();
            //update bug count
            jQ('span#'+case_run_id+'_case_bug_count').text(parseInt(jQ('span#'+case_run_id+'_case_bug_count').text())-1);
            if(jQ('span#'+case_run_id+'_case_bug_count').text()=='0'){
                jQ('span#'+case_run_id+'_case_bug_count').removeClass('have_bug');
            }
            if(returnobj.run_bug_count==0){
                jQ('span#total_run_bug_count').html("<a>No Bugs</a>");
            }
            else{
                jQ('span#total_run_bug_count a').html("Bugs ["+returnobj.run_bug_count+"]");
            }
            return constructCaseRunZone(container, title_container, case_id);
        } else {
            alert(returnobj.response);
            return false;
        }
    }
    
    new Ajax.Request(url, {
        method: 'get',
        parameters: parameters,
        onSuccess: success,
        onFailure: json_failure,
    })
}


function delCaseRun(run_id)
{
    var caseruns = serializeCaseRunFromInputList('id_table_cases', 'case_run');
    var numCaseRuns = caseruns.case_run.length;
    if(confirm('You are about to delete ' + numCaseRuns + ' case run(s). Are you sure?'))
       postToURL('removecaserun/', caseruns);
}

function editValue(form,hidebox,selectid,submitid)
{
    
    $(hidebox).hide();
    $(selectid).show();
    $(submitid).show();
    
    var data=form.serialize(true);
    var env_property_id = data.env_property_id;
    
    
    var success = function(t){
        returnobj=t.responseText.evalJSON(true);
        
        debug_output('Get environments succeed get ready to replace the select widget inner html');
        
        var values = returnobj.collect(function(o) {
                           return [o.pk, o.fields.value];
                       })
        
        set_up_choices($(selectid),values,0);
    }

    var failure = function(t) {
        alert("Update values failed");
    }
    
    var url = '/management/getinfo/';
    new Ajax.Request(url, {
        method:'get',
        parameters:{
            'info_type' : 'env_values',
            'env_property_id': env_property_id,
        },
        requestHeaders: {Accept: 'application/json'},
        onSuccess: success, 
        onFailure: failure,
        });
    
}

function submitValue(run_id,value,hidebox,select_field,submitid){
    
    var new_value = select_field.options[select_field.selectedIndex].innerHTML;
    var old_value = $$('input[name=current_run_env]')[0].value;
    var success = function(t) {
        returnobj = t.responseText.evalJSON(true);
        if(returnobj.rc == 0){
            
            $(hidebox).innerHTML = new_value;
            
            $(hidebox).show();
            select_field.hide();
            $(submitid).hide();
            $$('input[name=current_run_env]')[0].value = select_field.value;
        } else {
            alert(returnobj.response);
        }
    }
    
    var failure = function(t) {
        alert("Edit value failed");
    }

    var url  = '/runs/env_value/';
    new Ajax.Request(url, {
        method:'get',
        parameters: {
            'a': 'change',
            'old_env_value_id': old_value,
            'new_env_value_id': select_field.value,
            'run_id' : run_id,
        }, 
        onSuccess: success,
        onFailure: failure
    });
    
    }

function removeProperty(run_id,env_value_id)
{
    if(!confirm('Are you sure to remove this porperty?'))
        return false;
        
    var success = function(t) {
        returnobj = t.responseText.evalJSON(true);
        if(returnobj.rc == 0){
            window.location.reload();
        } else {
            alert(returnobj.response);
        }
    }
    
    var failure = function(t) {
        alert("Edit value failed");
    }
    var url  = '/runs/env_value/';
    new Ajax.Request(url, {
        method:'get',
        parameters:{
            'a' : 'remove',
            'info_type' : 'env_values',
            'env_value_id' : env_value_id,
            'run_id' : run_id,
        },
        requestHeaders: {Accept: 'application/json'},
        onSuccess: success, 
        onFailure: failure,
        });
    
}

function addProperty(run_id,env_group_id)
{
    
    $('dialog').show();
    $('dialog').update("<div class='add_env_content'><div class='add_env_close' onclick='this.up(1).hide()'></div><div class='env_title' id='id_title_group'></div><div class='add_env_box'>Property<br/><br/><select id='id_add_env_property'></select></div><div class='add_env_box'>Value<br/><br/><select id='id_add_env_value'></select></div><div class='add_env_button'><input type='button' value='Add' id='id_env_add'/><input type='button' value='Cancel' onclick='this.up(2).hide()'/></div></div>")
    
    var success = function(t){
        returnobj=t.responseText.evalJSON(true);
        
        
        var values = returnobj.collect(function(o) {
            return [o.pk, o.fields.name];
        })
        
        set_up_choices($('id_add_env_property'),values,0);
        
    }
    
    var failure = function(t) {
        alert("Update properties failed");
    }
    
    var url = '/management/getinfo/';
    new Ajax.Request(url, {
        method:'get',
        parameters:{
            'info_type' : 'env_properties',
            'env_group_id': env_group_id,
        },
        requestHeaders: {Accept: 'application/json'},
        onSuccess: success, 
        onFailure: failure,
        });
    
    
    $('id_add_env_property').observe('change', function(e) {
        change_value($F('id_add_env_property'),'id_add_env_value');
    })
    
    $('id_env_add').observe('click',function(e){
        add_property_to_env(run_id,$F('id_add_env_value'));
    })
    
}

function change_value(env_property_id,selectid)
{
    var success = function(t){
        returnobj=t.responseText.evalJSON(true);
        
        var values = returnobj.collect(function(o) {
            return [o.pk, o.fields.value];
        })
        
        set_up_choices($(selectid),values,0);
    }
        
    var failure = function(t) {
        alert("Update values failed");
    }
    
    var url = '/management/getinfo/';
    new Ajax.Request(url, {
        method:'get',
        parameters:{
            'info_type' : 'env_values',
            'env_property_id': env_property_id,
        },
        requestHeaders: {Accept: 'application/json'},
        onSuccess: success, 
        onFailure: failure,
        });
    
}

function add_property_to_env(run_id,env_value_id)
{
    var success = function(t) {
        returnobj=t.responseText.evalJSON(true);

        if(returnobj.rc == 0) {
            window.location.reload();
        } else {
            alert(returnobj.response);
            return false;
        }
    }
    
    var failure = function(t) {
        alert("Edit value failed");
    }
    var url  = '/runs/env_value/';
    new Ajax.Request(url, {
        method:'get',
        parameters:{
            'a' : 'add',
            'info_type' : 'env_values',
            'env_value_id' : env_value_id,
            'run_id' : run_id,
        },
        requestHeaders: {Accept: 'application/json'},
        onSuccess: success, 
        onFailure: failure,
    });
}

function addRunTag(container, run_id)
{
    tag = prompt('Please type new tag.');
    if(!tag)
        return false
    
    $(container).update('<div class="ajax_loading"></div>');
    
    var url = new String('/management/tags/');
    new Ajax.Updater(container, url, {
        method: 'get',
        parameters: {
            a: 'add',
            run: run_id,
            tags: tag,
        },
    })
}


function removeRuntag(container, run_id, tag)
{
    $(container).update('<div class="ajax_loading"></div>');
    
    var url = new String('/management/tags/');
    new Ajax.Updater(container, url, {
        method: 'get',
        parameters: {
            a: 'remove',
            run: run_id,
            tags: tag,
        },
    })
}

function constructRunCC(container, run_id, parameters)
{
    var complete = function(t) {
        if($('message')) {
            alert($('message').innerHTML);
            return false;
        }
    }
    var url = new String('/run/' + run_id + '/cc/');
    
    new Ajax.Updater(container, url, {
        method: 'get',
        parameters: parameters,
        onComplete: complete,
    })
}

function addRunCC(run_id, container)
{
    user = prompt('Please type new email or username for CC.');
    if(!user)
        return false;
    var parameters = {
        'do': 'add',
        user: user,
    };
    
    constructRunCC(container, run_id, parameters)
}

function removeRunCC(run_id, user, container)
{
    c = confirm('Are you sure to delete this user from CC?');
    
    if(!c)
        return false;
    
    var parameters = {
        'do': 'remove',
        user: user,
    };
    
    constructRunCC(container, run_id, parameters)
}

function changeCaseRunAssignee()
{
    var p = prompt('Please type new email or username for assignee');
    if(!p)
        return false;
    
    var parameters = {
          'info_type': 'users',
          'username': p,
    }
    getInfoAndUpdateObject(
        parameters,
        'testruns.testcaserun',
        serializeCaseRunFromInputList($('id_table_cases')),
        'assignee'
    )
}

function serializeCaseRunFromInputList(table, name)
{
    var elements = $(table).adjacent('input[name="case_run"]:checked');
    var returnobj_list = new Array();
    for (i in elements) {
        if (typeof(elements[i].value) == 'string')
        returnobj_list.push(elements[i].value);
    };
    if (name) {
        var returnobj = {};
        returnobj[name] = returnobj_list
        return returnobj
    }
    
    return returnobj_list;
}

function serialzeCaseForm(form, table, serialized)
{
    if(typeof(serialized) != 'boolean')
        var serialized = true;
    var data = form.serialize(serialized);
    data['case_run'] = serializeCaseFromInputList(table);
    return data
}

function sortCaseRun(form, order)
{
    if (form.order_by.value == order)
        form.order_by.value = '-' + order;
    else
        form.order_by.value = order;
    fireEvent(form.getElementsBySelector('input[type="submit"]')[0], 'click');
}

function showCaseRunsWithSelectedStatus(form, status_id)
{
    form.case_run_status__pk.value = status_id;
    fireEvent(form.getElementsBySelector('input[type="submit"]')[0], 'click');
}

//Added for choose runs and add cases to those runs
function serializeRunsFromInputList(table)
{
    var elements = $(table).adjacent('input[name="run"]:checked');
    var case_ids = new Array();
    for (i in elements) {
        if (typeof(elements[i].value) == 'string')
        case_ids.push(elements[i].value);
    };
    return case_ids
}

function insertCasesIntoTestRun(){
    var answer=confirm("Are you sure to add cases to the run?");
    if(!answer)
        return false;

    var trs = serializeRunsFromInputList("id_table_runs");	
    
    var elements = document.getElementsByName("case");
    var case_ids = new Array();
    var i=0;
    for (;i <elements.length;i++) {
        case_ids.push(elements[i].value);
    };
    
    var data_to_post = {};
    data_to_post['testrun_ids'] = trs;
    data_to_post['case_ids'] = case_ids;

    var url = "../chooseruns/";
    postToURL(url, data_to_post, 'POST');
}

/*
Functions defined below are using jQuery.
Author: ctang@redhat.com - 22 March 2011 
*/

function updateBugs(action){
    var runs = serializeCaseRunFromInputList($('id_table_cases'));
    if(runs.length==0){
        alert(default_messages.alert.no_case_selected);
        return false;
    }
    var bug_ids = prompt("Specify bug IDs, using comma to seperate multiple IDs.");
    if(!bug_ids){
        return false;
    }
    jQ.ajax({
        url: '/caserun/update-bugs-for-many/',
        dataType: 'json',
        success: function(res){
            if(res.rc==0){
                reloadWindow();
            }else{
                alert(res.response);
                return false;
            }
        },
        data: {
            'bugs': bug_ids,
            'action': action,
            'runs': runs.join(),
            'bug_system': 1
        }
    });
}

function showCommentForm(){
    var dialog = getDialog();
    var runs = serializeCaseRunFromInputList($('id_table_cases'));
    var comment_form = '<ul>' +
                            '<li><b>Comments: </b></li>' +
                            '<li><textarea name="comments" id="commentText" style="width:100%;height:100px;"></textarea></li>' + 
                            '<li><button id="btnComment">Confirm</button> <button id="btnCancelComment">Cancel</button>' +
                            ' <span id="commentsErr"></span>' +
                        '</ul>';
    if(!runs.length){
         return alert(default_messages.alert.no_case_selected);
    }
    dialog.update(comment_form);
    var commentText = jQ('#commentText');
    var commentsErr = jQ('#commentsErr');
    jQ('#btnComment').live('click', function(){
        var error;
        var comments = jQ.trim(commentText.val());
        if(!comments)
            error = 'No comments given.';
        if(error){
            commentsErr.html(error);
            return false;
        }
        jQ.ajax({
            url: '/caserun/comment-many/',
            data: {'comment': comments, 'run': runs.join()},
            dataType: 'json',
            success: function(res){
                if(res.rc==0){
                    reloadWindow();
                }else{
                    commentsErr.html(res.response);
                    return false;
                }
            }
        });
    });
    jQ('#btnCancelComment').live('click', function(){
        dialog.hide();
        commentText.val('');
    });
    dialog.show();
}

function commentCaseRuns(){
    // comment multiple caseruns at a time.

    dialog.update();
    dialog.show();
    
}



jQ(document).ready(function(){
    jQ('.btnBlueCaserun').mouseover(function(){
        jQ(this).find('ul').show();
    }).mouseout(function(){
        jQ(this).find('ul').hide();
    });
    jQ('ul.statusOptions a').click(function(){
        var option = jQ(this).attr('value');
        var object_pks = serializeCaseRunFromInputList($('id_table_cases'));
        if(option == '')
            return false;
        if(object_pks.length == 0) {
            alert(default_messages.alert.no_case_selected);
            return false;
        };
        if(!confirm(default_messages.confirm.change_case_status))
            return false;
        updateObject('testruns.testcaserun', object_pks, 'case_run_status', option, 'int', reloadWindow);
    });
});

function get_addlink_dialog()
{
    return jQ('#addlink_dialog');
}

/*
 * Do AJAX request to backend to remove a link
 *
 * - sender: 
 * - link_id: the ID of an arbitrary link.
 */
function removeLink(sender, link_id)
{
    jQ.ajax({
	url: '/linkref/remove/' + link_id + '/',
	type: 'GET',
	dataType: 'json',
	success: function(data, textStatus, jqXHR) {
	    var li_node = sender.parentNode;
	    li_node.parentNode.removeChild(li_node);
	},
	error: function(jqXHR, textStatus, errorThrown) {
	    var data = JSON.parse(jqXHR.responseText);
	    alert(data.message);
	},
    });
}

/*
 * Add link to case run
 *
 * - sender: the Add link button, which is pressed to fire this event.
 * - target_id: to which TestCaseRun the new link will be linked.
 */
function addLinkToCaseRun(sender, case_id, case_run_id)
{
    var dialog_p = get_addlink_dialog();

    dialog_p.dialog('option', 'target_id', case_run_id);
    // These two options are used for reloading TestCaseRun when successfully.
    container = jQ(sender).parents('.case_content.hide')[0];
    dialog_p.dialog('option', 'container', container);
    title_container = container.previous();
    dialog_p.dialog('option', 'title_container', title_container);
    dialog_p.dialog('option', 'case_id', case_id);

    dialog_p.dialog('open');
}

/*
 * Initialize dialog for getting information about new link, which is attached
 * to an arbitrary instance of TestCaseRun
 *
 * - link_target: string, the name of Model to whose instance new link will be
 *   linked.
 */
function initialize_addlink_dialog(link_target)
{
    var dialog_p = get_addlink_dialog();

    dialog_p.dialog({
	autoOpen: false,
	modal: true,
	resizable: false,
	height: 300,
	width: 400,
	buttons: {
	    "OK": function() {
		// TODO: validate name and url
		var name = jQ('#testlog_name').attr('value');
		var url = jQ('#testlog_url').attr('value');
		var target = jQ(this).dialog('option', 'target');
		var target_id = jQ(this).dialog('option', 'target_id');

		jQ.ajax({
		    url: '/linkref/add/',
		    type: 'POST',
		    data: { name: name, url: url, target: target, target_id: target_id },
		    dataType: 'json',
		    success: function(data, textStatus, jqXHR) {
			dialog_p.dialog('close');

			// Begin to construct case run area
			container = dialog_p.dialog('option', 'container');
			title_container = dialog_p.dialog('option', 'title_container');
			case_id = dialog_p.dialog('option', 'case_id');
			constructCaseRunZone(container, title_container, case_id);
		    },
		    error: function (jqXHR, textStatus, errorThrown) {
			var data = JSON.parse(jqXHR.responseText);
			alert(data.message);
		    },
		});
	    },
	    "Cancel": function() {
		jQ(this).dialog('close');
	    }
	},
	beforeClose: function() {
	    // clean name and url for next input
	    jQ('#testlog_name').attr('value', '');
	    jQ('#testlog_url').attr('value', '');

	    return true;
	},

	// Customize variables
	// Used for adding links to an instance of TestCaseRun
	target: link_target,
	/* ATTENTION: target_id can be determined when open this dialog, and
	 * this must be set
	 */
	target_id: null,
    });
}
